#PRIMER PREGUNTA: programación orientada a objetos#Clase padreclass Propiedad:        def __init__(self, precio):        self.set_precio(precio)            def __str__(self):        return "Precio: " + str(self.precio)        def set_precio(self, precio):        try:            self.precio = float(precio)        except ValueError:            self.precio = 0        def __lt__(self, otro):        return self.precio < otro.precio        def __gt__(self, otro):        return self.precio > otro.precio        def __eq__(self, otro):        return self.precio == otro.precio            #Clases hijasclass Departamento(Propiedad):        def __init__(self, precio, nivel):        super().__init__(precio)        self.set_nivel(nivel)        def __str__(self):        return "Tipo de propiedad: departamento, " + super().__str__() + ", Nivel: " + str(self.nivel) + ", Precio sugerido: " + str(self.calcular_precio_sugerido())        def set_nivel(self, nivel):        try:            self.nivel = int(nivel)        except ValueError:            self.nivel = 0        def calcular_precio_sugerido(self):        if (self.nivel <= 2) == True:            precio_sugerido = (self.precio)*1.5 - (self.nivel)*50000        else:            precio_sugerido = (self.precio)*1.1 - (self.nivel)*25000        return float(precio_sugerido)class Casa(Propiedad):         def __init__(self, precio, pisos):        super().__init__(precio)        self.set_pisos(pisos)        def __str__(self):        return "Tipo de propiedad: casa, " + super().__str__() + ", Pisos: " + str(self.pisos) + ", Precio sugerido: " + str(self.calcular_precio_sugerido())        def set_pisos(self, pisos):        try:            self.pisos = int(pisos)        except ValueError:            self.pisos = 0        def calcular_precio_sugerido(self):        if (self.pisos > 1) == True:            precio_sugerido = (self.precio)*1.2 + (self.pisos)*50000        else:            precio_sugerido = self.precio         return float(precio_sugerido)    #Lectura de archivo class Carpeta:        def __init__(self):        self.propiedades = []        def __str__(self):        acumulado = ""        for propiedad in self.propiedades:            acumulado += propiedad.__str__() + "\n"        return acumulado    def cargar_datos(self, nombre_archivo):        with open(nombre_archivo, "r") as archivo:            for renglon in archivo.readlines():                renglon = renglon.split(",")                if renglon[0] == "departamento":                    self.propiedades.append(Departamento(renglon[1], renglon[2]))                elif renglon[0] == "casa":                    self.propiedades.append(Casa(renglon[1], renglon[2]))                                         carpeta = Carpeta()carpeta.cargar_datos("propiedades.csv")carpeta.propiedades.sort() # ya de una vez se ordenan las propiedades usando sort() como pide en el inciso g), ya que las clases tienen gt, lt, eqprint(carpeta)#Calcular precio total de las propiedadesdef precio_total(carpeta):    suma = 0    for propiedad in carpeta.propiedades:       suma += propiedad.calcular_precio_sugerido()    return suma    print("Precio sugerido total de la carpeta: " + str((precio_total(carpeta))))#Imprimir número de casas y número de departamentos usando isinstancecasas = 0dptos = 0for propiedad in carpeta.propiedades:    if isinstance(propiedad, Departamento):        dptos +=1    elif isinstance(propiedad, Casa):        casas += 1print("Número de casas: " + str(casas))print("Número de departamentos: " + str(dptos))    #SEGUNDA PREGUNTA: programación orientada a objetoslista = [("Luis", 55, 15500), ("Agustin", 19, 22000), ("Maria", 29, 32000), ("Saul", 52, 10000)]                        #Ordenar por nombre, en ascendenteclass Orden_nombre:        def __init__(self, nombre, edad, salario):        self.nombre = nombre        self.edad = int(edad)        self.salario = float(salario)        def __str__(self):        return "Nombre: " + str(self.nombre) + ", Edad: " + str(self.edad) + ", Salario: " + str(self.salario)            def __lt__(self, otro):        return self.nombre < otro.nombre        def __gt__(self, otro):        return self.nombre > otro.nombre        def __eq__(self, otro):        return self.nombre == otro.nombreclass Lista_nombre:         def __init__(self):        self.lista_nombres = []            def __str__(self):        acumulado = ""        for nombre in self.lista_nombres:            acumulado += nombre.__str__() + "\n"        return acumulado        def cargar_datos(self, lista):                for elemento in lista:            self.lista_nombres.append(Orden_nombre(elemento[0], elemento[1], elemento[2]))lista1 = Lista_nombre()lista1.cargar_datos(lista)lista1.lista_nombres.sort()print(lista1)                  #Ordenar por edad, en ascendenteclass Orden_edad:        def __init__(self, nombre, edad, salario):        self.nombre = nombre        self.edad = int(edad)        self.salario = float(salario)        def __str__(self):        return "Nombre: " + str(self.nombre) + ", Edad: " + str(self.edad) + ", Salario: " + str(self.salario)            def __lt__(self, otro):        return self.edad < otro.edad        def __gt__(self, otro):        return self.edad > otro.edad        def __eq__(self, otro):        return self.edad == otro.edadclass Lista_edad:         def __init__(self):        self.lista_edad = []            def __str__(self):        acumulado = ""        for elemento in self.lista_edad:            acumulado += elemento.__str__() + "\n"        return acumulado        def cargar_datos(self, lista):                for elemento in lista:            self.lista_edad.append(Orden_edad(elemento[0], elemento[1], elemento[2]))lista2 = Lista_edad()lista2.cargar_datos(lista)lista2.lista_edad.sort()print(lista2)#Ordenar por salario, en ascendenteclass Orden_salario:        def __init__(self, nombre, edad, salario):        self.nombre = nombre        self.edad = int(edad)        self.salario = float(salario)        def __str__(self):        return "Nombre: " + str(self.nombre) + ", Edad: " + str(self.edad) + ", Salario: " + str(self.salario)            def __lt__(self, otro):        return self.salario < otro.salario        def __gt__(self, otro):        return self.salario > otro.salario        def __eq__(self, otro):        return self.salario == otro.salarioclass Lista_salario:         def __init__(self):        self.lista_salario = []            def __str__(self):        acumulado = ""        for elemento in self.lista_salario:            acumulado += elemento.__str__() + "\n"        return acumulado        def cargar_datos(self, lista):                for elemento in lista:            self.lista_salario.append(Orden_salario(elemento[0], elemento[1], elemento[2]))lista3 = Lista_salario()lista3.cargar_datos(lista)lista3.lista_salario.sort()print(lista3)#Imprimir los penultimos elementos